"""
ExchangeManager —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞.
"""

import asyncio
import logging
from typing import List, Optional, Callable
from cthulhu_src.services.exchange_manager import ExchangeManager
from cthulhu_src.services.pair import Pair

logger = logging.getLogger("excthulhu")


class ProgressBaseExchange:
    """–û–±–µ—Ä—Ç–∫–∞ –¥–ª—è BaseExchange —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å–∞."""
    
    def __init__(self, exchange, progress_callback: Optional[Callable] = None):
        self.exchange = exchange
        self.progress_callback = progress_callback
    
    async def fetch_prices(self) -> List[Pair]:
        """–ó–∞–≥—Ä—É–∑–∏—Ç—å —Ü–µ–Ω—ã —Å –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å–∞."""
        try:
            markets = await self.exchange._with_proxy().fetch_markets()
        except Exception as exc:
            self.exchange.log.warning(f"‚ö†Ô∏è Failed to fetch markets: {exc}")
            return []

        symbols = [market["symbol"] for market in markets]
        currency = set([cur for cur_pair in symbols for cur in cur_pair.split("/")])
        
        self.exchange.log.info(f"üí± Received {len(currency)} currency types.")

        pairs: List[Pair] = []
        
        async def fetch(symbol: str) -> List[Pair]:
            try:
                return await self.exchange.state_preparation(symbol)
            except Exception as exc:
                self.exchange.log.warning(f"‚ö†Ô∏è Failed to fetch {symbol}: {exc}")
                return []

        batch_size = self.exchange.max_concurrent_requests
        total_batches = (len(symbols) + batch_size - 1) // batch_size
        
        for i in range(0, len(symbols), batch_size):
            batch = symbols[i : i + batch_size]
            current_batch = i // batch_size + 1
            
            if self.progress_callback:
                progress_percent = int((current_batch / total_batches) * 100)
                self.progress_callback(progress_percent, f"–ó–∞–≥—Ä—É–∑–∫–∞ –∫–Ω–∏–≥ –æ—Ä–¥–µ—Ä–æ–≤: {current_batch}/{total_batches}")
            
            self.exchange.log.debug(
                f"üîÑ Processing symbols {i+1}-{min(i+batch_size, len(symbols))} of {len(symbols)}"
            )
            results = await asyncio.gather(*[fetch(symbol) for symbol in batch])
            for pairs_batch in results:
                pairs.extend([p for p in pairs_batch if len(p.trade_book) > 0])

        self.exchange.log.info(f"üìä Received {len(pairs)} currency pairs exchange prices.")
        return pairs


class ProgressExchangeManager(ExchangeManager):
    """
    ExchangeManager —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö.
    """
    
    def __init__(self, exchanges: List[str], proxies: tuple = (), cached: bool = False, 
                 cache_dir: str = "~/.cache/cthulhu", progress_callback: Optional[Callable] = None):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å–∞.
        
        Args:
            exchanges: –°–ø–∏—Å–æ–∫ –±–∏—Ä–∂
            proxies: –ü—Ä–æ–∫—Å–∏
            cached: –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫—ç—à
            cache_dir: –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –∫—ç—à–∞
            progress_callback: –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –≤—ã–∑–æ–≤–∞ –¥–ª—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
        """
        super().__init__(exchanges, proxies, cached, cache_dir)
        self.progress_callback = progress_callback
        self.total_exchanges = len(exchanges)
        self.current_exchange = 0
    
    async def fetch_prices(self) -> List[Pair]:
        """–ó–∞–≥—Ä—É–∑–∏—Ç—å —Ü–µ–Ω—ã —Å –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å–∞."""
        if self.progress_callback:
            self.progress_callback(0, "–ù–∞—á–∞–ª–æ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö —Å –±–∏—Ä–∂")
        
        results = []
        for i, exchange_name in enumerate(self._exchange_names):
            try:
                if self.progress_callback:
                    progress = int((i / self.total_exchanges) * 70)  # 70% –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö
                    self.progress_callback(progress, f"–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö —Å {exchange_name}")
                
                if exchange_name not in self._cached_exchanges:
                    # –°–æ–∑–¥–∞–µ–º –æ–±–µ—Ä—Ç–∫—É —Å –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –∫–Ω–∏–≥ –æ—Ä–¥–µ—Ä–æ–≤
                    exchange = self._exchanges[exchange_name]
                    progress_exchange = ProgressBaseExchange(exchange, self.progress_callback)
                    exchange_prices = await progress_exchange.fetch_prices()
                else:
                    # –î–ª—è –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—ã—á–Ω—ã–π –º–µ—Ç–æ–¥
                    exchange_prices = await self.fetch_exchange_prices(exchange_name)
                
                results.extend(exchange_prices)
                
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å {exchange_name}: {e}")
                if self.progress_callback:
                    self.progress_callback(progress, f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å {exchange_name}")
        
        if self.progress_callback:
            self.progress_callback(70, "–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
        
        return results 