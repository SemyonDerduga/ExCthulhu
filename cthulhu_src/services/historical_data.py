"""
–°–µ—Ä–≤–∏—Å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö —Å –±–∏—Ä–∂.
"""

import asyncio
import logging
from typing import List, Optional, Dict, Any
from datetime import datetime, timedelta
import ccxt

logger = logging.getLogger("excthulhu")


class HistoricalDataService:
    """
    –°–µ—Ä–≤–∏—Å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö —Å –±–∏—Ä–∂.
    
    –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –ø–æ–ª—É—á–µ–Ω–∏–µ:
    - OHLCV –¥–∞–Ω–Ω—ã—Ö (Open, High, Low, Close, Volume)
    - –í—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ä—è–¥–æ–≤ —Ü–µ–Ω
    - –î–∞–Ω–Ω—ã—Ö –æ —Ç–æ—Ä–≥–æ–≤—ã—Ö –æ–±—ä–µ–º–∞—Ö
    """
    
    def __init__(self, exchange_name: str, proxies: List[str] = None):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–∞.
        
        Args:
            exchange_name: –ù–∞–∑–≤–∞–Ω–∏–µ –±–∏—Ä–∂–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 'binance')
            proxies: –°–ø–∏—Å–æ–∫ –ø—Ä–æ–∫—Å–∏ –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        """
        self.exchange_name = exchange_name
        self.proxies = proxies or []
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è CCXT –±–∏—Ä–∂–∏
        exchange_class = getattr(ccxt, exchange_name)
        self.exchange = exchange_class({
            'proxies': {
                'http': proxies[0] if proxies else None,
                'https': proxies[0] if proxies else None,
            } if proxies else {}
        })
    
    async def get_ohlcv(
        self, 
        symbol: str, 
        timeframe: str = '1m', 
        limit: int = 100,
        since: Optional[int] = None
    ) -> List[Dict[str, Any]]:
        """
        –ü–æ–ª—É—á–∏—Ç—å OHLCV –¥–∞–Ω–Ω—ã–µ.
        
        Args:
            symbol: –¢–æ—Ä–≥–æ–≤–∞—è –ø–∞—Ä–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 'BTC/USDT')
            timeframe: –í—Ä–µ–º–µ–Ω–Ω–æ–π –∏–Ω—Ç–µ—Ä–≤–∞–ª ('1m', '5m', '1h', '1d')
            limit: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–≤–µ—á–µ–π
            since: –í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö
        
        Returns:
            –°–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π —Å OHLCV –¥–∞–Ω–Ω—ã–º–∏
        """
        try:
            # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ä—ã–Ω–∫–∏ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
            if hasattr(self.exchange, 'load_markets'):
                if hasattr(self.exchange.load_markets, '__call__'):
                    if asyncio.iscoroutinefunction(self.exchange.load_markets):
                        await self.exchange.load_markets()
                    else:
                        self.exchange.load_markets()
            
            # –ü–æ–ª—É—á–∞–µ–º OHLCV –¥–∞–Ω–Ω—ã–µ
            if hasattr(self.exchange, 'fetch_ohlcv'):
                if asyncio.iscoroutinefunction(self.exchange.fetch_ohlcv):
                    ohlcv = await self.exchange.fetch_ohlcv(symbol, timeframe, since, limit)
                else:
                    ohlcv = self.exchange.fetch_ohlcv(symbol, timeframe, since, limit)
            else:
                logger.error(f"‚ùå –ë–∏—Ä–∂–∞ {self.exchange_name} –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç fetch_ohlcv")
                return []
            
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —É–¥–æ–±–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
            result = []
            for candle in ohlcv:
                result.append({
                    'timestamp': candle[0],
                    'datetime': datetime.fromtimestamp(candle[0] / 1000),
                    'open': candle[1],
                    'high': candle[2],
                    'low': candle[3],
                    'close': candle[4],
                    'volume': candle[5]
                })
            
            logger.info(f"üìä –ü–æ–ª—É—á–µ–Ω–æ {len(result)} OHLCV –∑–∞–ø–∏—Å–µ–π –¥–ª—è {symbol}")
            return result
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è OHLCV –¥–ª—è {symbol}: {e}")
            return []
    
    async def get_price_history(
        self, 
        symbol: str, 
        timeframe: str = '1m', 
        hours: int = 24
    ) -> List[float]:
        """
        –ü–æ–ª—É—á–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é —Ü–µ–Ω –¥–ª—è –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è.
        
        Args:
            symbol: –¢–æ—Ä–≥–æ–≤–∞—è –ø–∞—Ä–∞
            timeframe: –í—Ä–µ–º–µ–Ω–Ω–æ–π –∏–Ω—Ç–µ—Ä–≤–∞–ª
            hours: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∞—Å–æ–≤ –∏—Å—Ç–æ—Ä–∏–∏
        
        Returns:
            –°–ø–∏—Å–æ–∫ —Ü–µ–Ω (close prices)
        """
        try:
            # –í—ã—á–∏—Å–ª—è–µ–º –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞
            since = int((datetime.now() - timedelta(hours=hours)).timestamp() * 1000)
            
            # –ü–æ–ª—É—á–∞–µ–º OHLCV –¥–∞–Ω–Ω—ã–µ
            ohlcv_data = await self.get_ohlcv(symbol, timeframe, limit=1000, since=since)
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ü–µ–Ω—ã –∑–∞–∫—Ä—ã—Ç–∏—è
            prices = [candle['close'] for candle in ohlcv_data]
            
            logger.info(f"üìà –ü–æ–ª—É—á–µ–Ω–æ {len(prices)} —Ü–µ–Ω –¥–ª—è {symbol}")
            return prices
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ —Ü–µ–Ω –¥–ª—è {symbol}: {e}")
            return []
    
    async def get_recent_prices(
        self, 
        symbol: str, 
        count: int = 100
    ) -> List[float]:
        """
        –ü–æ–ª—É—á–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Ü–µ–Ω—ã –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞.
        
        Args:
            symbol: –¢–æ—Ä–≥–æ–≤–∞—è –ø–∞—Ä–∞
            count: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Ü–µ–Ω
        
        Returns:
            –°–ø–∏—Å–æ–∫ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Ü–µ–Ω
        """
        try:
            ohlcv_data = await self.get_ohlcv(symbol, '1m', limit=count)
            prices = [candle['close'] for candle in ohlcv_data]
            
            logger.info(f"üí∞ –ü–æ–ª—É—á–µ–Ω–æ {len(prices)} –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Ü–µ–Ω –¥–ª—è {symbol}")
            return prices
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Ü–µ–Ω –¥–ª—è {symbol}: {e}")
            return []
    
    async def get_market_info(self, symbol: str) -> Dict[str, Any]:
        """
        –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä—ã–Ω–∫–µ.
        
        Args:
            symbol: –¢–æ—Ä–≥–æ–≤–∞—è –ø–∞—Ä–∞
        
        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Ä—ã–Ω–∫–µ
        """
        try:
            # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ä—ã–Ω–∫–∏ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
            if hasattr(self.exchange, 'load_markets'):
                if hasattr(self.exchange.load_markets, '__call__'):
                    if asyncio.iscoroutinefunction(self.exchange.load_markets):
                        await self.exchange.load_markets()
                    else:
                        self.exchange.load_markets()
            
            if symbol not in self.exchange.markets:
                logger.error(f"‚ùå –¢–æ—Ä–≥–æ–≤–∞—è –ø–∞—Ä–∞ {symbol} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –Ω–∞ {self.exchange_name}")
                return {}
            
            market = self.exchange.markets[symbol]
            
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π —Ç–∏–∫–µ—Ä
            if hasattr(self.exchange, 'fetch_ticker'):
                if asyncio.iscoroutinefunction(self.exchange.fetch_ticker):
                    ticker = await self.exchange.fetch_ticker(symbol)
                else:
                    ticker = self.exchange.fetch_ticker(symbol)
            else:
                logger.error(f"‚ùå –ë–∏—Ä–∂–∞ {self.exchange_name} –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç fetch_ticker")
                return {}
            
            return {
                'symbol': symbol,
                'base': market['base'],
                'quote': market['quote'],
                'active': market['active'],
                'current_price': ticker['last'],
                'bid': ticker['bid'],
                'ask': ticker['ask'],
                'volume_24h': ticker['baseVolume'],
                'change_24h': ticker['percentage'],
                'high_24h': ticker['high'],
                'low_24h': ticker['low']
            }
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ä—ã–Ω–∫–µ {symbol}: {e}")
            return {}
    
    async def close(self):
        """–ó–∞–∫—Ä—ã—Ç—å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∏—Ä–∂–µ–π."""
        if hasattr(self.exchange, 'close'):
            if asyncio.iscoroutinefunction(self.exchange.close):
                await self.exchange.close()
            else:
                self.exchange.close()


class MultiExchangeHistoricalService:
    """
    –°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –±–∏—Ä–∂.
    """
    
    def __init__(self, exchange_names: List[str], proxies: List[str] = None):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º—É–ª—å—Ç–∏–±–∏—Ä–∂–µ–≤–æ–≥–æ —Å–µ—Ä–≤–∏—Å–∞.
        
        Args:
            exchange_names: –°–ø–∏—Å–æ–∫ –Ω–∞–∑–≤–∞–Ω–∏–π –±–∏—Ä–∂
            proxies: –°–ø–∏—Å–æ–∫ –ø—Ä–æ–∫—Å–∏
        """
        self.services = {
            name: HistoricalDataService(name, proxies)
            for name in exchange_names
        }
    
    async def get_prices_from_all_exchanges(
        self, 
        symbol: str, 
        count: int = 100
    ) -> Dict[str, List[float]]:
        """
        –ü–æ–ª—É—á–∏—Ç—å —Ü–µ–Ω—ã —Å –≤—Å–µ—Ö –±–∏—Ä–∂.
        
        Args:
            symbol: –¢–æ—Ä–≥–æ–≤–∞—è –ø–∞—Ä–∞
            count: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ü–µ–Ω
        
        Returns:
            –°–ª–æ–≤–∞—Ä—å {–±–∏—Ä–∂–∞: [—Ü–µ–Ω—ã]}
        """
        tasks = []
        for exchange_name, service in self.services.items():
            task = service.get_recent_prices(symbol, count)
            tasks.append((exchange_name, task))
        
        results = {}
        for exchange_name, task in tasks:
            try:
                prices = await task
                if prices:
                    results[exchange_name] = prices
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —Å {exchange_name}: {e}")
        
        return results
    
    async def close(self):
        """–ó–∞–∫—Ä—ã—Ç—å –≤—Å–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è."""
        close_tasks = []
        for service in self.services.values():
            close_tasks.append(service.close())
        
        if close_tasks:
            await asyncio.gather(*close_tasks, return_exceptions=True) 