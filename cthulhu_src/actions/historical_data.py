"""
–î–µ–π—Å—Ç–≤–∏–µ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö —Å –±–∏—Ä–∂.
"""

import asyncio
import logging
from typing import Optional, List

from cthulhu_src.services.historical_data import MultiExchangeHistoricalService


async def run(
    ctx,
    exchange: str,
    symbol: str,
    hours: int = 24,
    count: int = 100,
    output_format: str = "prices",
) -> None:
    """
    –ü–æ–ª—É—á–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ —Å –±–∏—Ä–∂–∏.
    
    Args:
        ctx: –ö–æ–Ω—Ç–µ–∫—Å—Ç CLI
        exchange: –ù–∞–∑–≤–∞–Ω–∏–µ –±–∏—Ä–∂–∏
        symbol: –¢–æ—Ä–≥–æ–≤–∞—è –ø–∞—Ä–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, BTC/USDT)
        hours: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∞—Å–æ–≤ –∏—Å—Ç–æ—Ä–∏–∏
        count: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –∑–∞–ø–∏—Å–µ–π
        output_format: –§–æ—Ä–º–∞—Ç –≤—ã–≤–æ–¥–∞ (prices, ohlcv, info)
    """
    log = logging.getLogger("excthulhu")
    log.info(f"üìä –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ —Å {exchange} –¥–ª—è {symbol}")
    
    try:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–∞
        historical_service = MultiExchangeHistoricalService([exchange])
        
        if output_format == "prices":
            # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–ª—å–∫–æ —Ü–µ–Ω—ã
            prices = await historical_service.services[exchange].get_price_history(
                symbol, hours=hours
            )
            
            if prices:
                log.info(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ {len(prices)} —Ü–µ–Ω")
                print(f"–¶–µ–Ω—ã: {','.join([str(p) for p in prices])}")
            else:
                log.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ü–µ–Ω—ã")
                
        elif output_format == "ohlcv":
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª–Ω—ã–µ OHLCV –¥–∞–Ω–Ω—ã–µ
            ohlcv_data = await historical_service.services[exchange].get_ohlcv(
                symbol, limit=count
            )
            
            if ohlcv_data:
                log.info(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ {len(ohlcv_data)} OHLCV –∑–∞–ø–∏—Å–µ–π")
                for i, candle in enumerate(ohlcv_data[:5]):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5
                    print(f"–ó–∞–ø–∏—Å—å {i+1}: {candle}")
            else:
                log.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å OHLCV –¥–∞–Ω–Ω—ã–µ")
                
        elif output_format == "info":
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä—ã–Ω–∫–µ
            market_info = await historical_service.services[exchange].get_market_info(symbol)
            
            if market_info:
                log.info("‚úÖ –ü–æ–ª—É—á–µ–Ω–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä—ã–Ω–∫–µ")
                for key, value in market_info.items():
                    print(f"{key}: {value}")
            else:
                log.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä—ã–Ω–∫–µ")
        
        await historical_service.close()
        
    except Exception as e:
        log.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö: {e}")
        return 