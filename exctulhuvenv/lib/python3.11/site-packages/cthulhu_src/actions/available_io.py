"""Retrieve currencies available for deposits and withdrawals."""

import os
import json

import ccxt
import logging
import hmac
import hashlib
from tqdm import tqdm
from pathlib import Path
from os.path import expanduser
import urllib.parse
import http.client

API_KEY = "AC658D535F4112404C1CC449016CBE1E"
API_SECRET = b"7d1baac2ff2c66134b70ad6745aa6106"
AVAILABLE_IO_DIR = expanduser("~/.cache/cthulhu/available_io")


def run(cxt, exchange: str) -> None:
    """
    –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≤–∞–ª—é—Ç, –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–ª—è –≤–≤–æ–¥–∞ –∏ –≤—ã–≤–æ–¥–∞ –Ω–∞ –±–∏—Ä–∂–µ.
    
    –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è:
    1. –ü–æ–¥–∫–ª—é—á–∞–µ—Ç—Å—è –∫ —É–∫–∞–∑–∞–Ω–Ω–æ–π –±–∏—Ä–∂–µ —á–µ—Ä–µ–∑ CCXT
    2. –ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–∞—Ä
    3. –ò–∑–≤–ª–µ–∫–∞–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –≤–∞–ª—é—Ç—ã –∏–∑ –ø–∞—Ä
    4. –°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ —Ñ–∞–π–ª—ã –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
    
    –î–ª—è Yobit –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –∫–æ—à–µ–ª—å–∫–æ–≤ —á–µ—Ä–µ–∑ API.
    """

    log = logging.getLogger("excthulhu")
    log.info(f"üöÄ Start getting available i/o value for {exchange}...")

    available_cur = []
    not_available = []

    if exchange == "yobit":

        """
        –ö–∞–∂–¥—ã–π –Ω–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –∫ —Å–µ—Ä–≤–µ—Ä—É –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —É–≤–µ–ª–∏—á–µ–Ω–Ω–æ–µ —á–∏—Å–ª–æ –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ 1-2147483646
        –ü–æ—ç—Ç–æ–º—É —Ö—Ä–∞–Ω–∏–º —á–∏—Å–ª–æ –≤ —Ñ–∞–π–ª–µ –ø–æ–±–ª–∏–∑–æ—Å—Ç–∏, –∫–∞–∂–¥—ã–π —Ä–∞–∑ –æ–±–Ω–æ–≤–ª—è—è –µ–≥–æ
        """
        nonce_file = "./nonce"
        if not os.path.exists(nonce_file):
            with open(nonce_file, "w") as out:
                out.write("1")

        # –ë—É–¥–µ–º –ø–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞—Ç—å –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–∞—Ö —Å –±–∏—Ä–∂–∏
        class YobitException(Exception):
            pass

        def call_api(**kwargs):
            # –ü—Ä–∏ –∫–∞–∂–¥–æ–º –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ —Ç–æ—Ä–≥–æ–≤–æ–º—É API —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ nonce –Ω–∞ –µ–¥–∏–Ω–∏—Ü—É
            with open(nonce_file, "r+") as inp:
                nonce = int(inp.read())
                inp.seek(0)
                inp.write(str(nonce + 1))
                inp.truncate()

            payload = {"nonce": nonce}

            if kwargs:
                payload.update(kwargs)
            payload = urllib.parse.urlencode(payload)

            H = hmac.new(key=API_SECRET, digestmod=hashlib.sha512)
            H.update(payload.encode("utf-8"))
            sign = H.hexdigest()

            headers = {
                "Content-type": "application/x-www-form-urlencoded",
                "Key": API_KEY,
                "Sign": sign,
            }
            conn = http.client.HTTPSConnection("yobit.net", timeout=60)
            conn.request("POST", "/tapi/", payload, headers)
            response = conn.getresponse().read()

            conn.close()

            try:
                obj = json.loads(response.decode("utf-8"))

                if "error" in obj and obj["error"]:
                    raise YobitException(obj["error"])
                return obj
            except json.decoder.JSONDecodeError:
                raise YobitException(
                    "–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—ã—Ö –¥–∞–Ω–Ω—ã—Ö, –ø–æ–ª—É—á–µ–Ω–∞ —Å—Ç—Ä–æ–∫–∞", response
                )

        ccxt_yobit = ccxt.yobit()

        values = []
        for market in ccxt_yobit.fetch_markets():
            values.append(market["symbol"].split("/")[0])
            values.append(market["symbol"].split("/")[1])
        values = set(values)

        log.info(f"üî¢ –í—Å–µ–≥–æ –≤–∞–ª—é—Ç {len(values)}")

        for value in tqdm(
            values, desc="üîÑ Fetching wallets", unit="coin", dynamic_ncols=True
        ):
            print(value)
            try:
                log.info(f"üí∞ –ü–æ–ª—É—á–∞–µ–º –∫–æ—à–µ–ª—å –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è ({value})")
                resp = call_api(method="GetDepositAddress", coinName=value)
                if not resp["return"]["status"] == "maintenance":
                    available_cur.append(value)
            except YobitException as e:
                print(e)
                not_available.append(value)

        available = [f"{exchange}_{currency}" for currency in list(set(available_cur))]
        log.info(f"üì• –í—Å–µ–≥–æ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–ª—è –≤–≤–æ–¥–∞ –≤–∞–ª—é—Ç {len(available)}")
        log.info(f"üì§ –í—Å–µ–≥–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–ª—è –≤–≤–æ–¥–∞ –≤–∞–ª—é—Ç {len(not_available)}")
    else:

        # –°–ª–æ–≤–∞—Ä—å –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö –±–∏—Ä–∂ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏
        exchanges_instances = {
            "binance": ccxt.binance(),
            "exmo": ccxt.exmo(),
            "hollaex": ccxt.hollaex(),
            "oceanex": ccxt.oceanex(),
            "poloniex": ccxt.poloniex(),
            "upbit": ccxt.upbit(),
        }

        if exchange not in exchanges_instances:
            log.error(f"‚ùå –ë–∏—Ä–∂–∞ {exchange} –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è. –î–æ—Å—Ç—É–ø–Ω—ã–µ –±–∏—Ä–∂–∏: {', '.join(exchanges_instances.keys())}")
            return

        ccxt_exchanger = exchanges_instances[exchange]

        values = []
        for market in ccxt_exchanger.fetch_markets():
            values.append(market["symbol"].split("/")[0])
            values.append(market["symbol"].split("/")[1])
        available = [f"{exchange}_{currency}" for currency in list(set(values))]

    log.info(f"üíæ Save avalible currency list for exchange {exchange}")
    cache_dir_path = Path(os.path.expanduser(AVAILABLE_IO_DIR))
    cache_dir_path.mkdir(parents=True, exist_ok=True)

    input_file_path = os.path.join(AVAILABLE_IO_DIR, f"{exchange}_input.txt")
    with open(input_file_path, "w") as f:
        f.write("\n".join(available))

    output_file_path = os.path.join(AVAILABLE_IO_DIR, f"{exchange}_output.txt")
    with open(output_file_path, "w") as f:
        f.write("\n".join(available))
